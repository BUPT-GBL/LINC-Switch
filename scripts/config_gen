#!/usr/bin/env escript

main([]) ->
    usage();
main(Args) ->
    try parse_args(Args, []) of
        Config ->
            {switches, Switches} = lists:keyfind(switches, 1, Config),
            {controllers, Controllers} = lists:keyfind(controllers, 1, Config),
            {output_file, OutputFile} = lists:keyfind(output_file, 1, Config),
            SysConfig = generate_sys_config(Switches, Controllers),
            ok = file:write_file(OutputFile, io_lib:fwrite("~p.~n", [SysConfig]))
    catch
        _:required_argument_missing ->
            io:format("Required argument missing.~n"),
            usage();
        _:_ ->
            io:format("Invalid argument.~n"),
            usage()
    end.

usage() ->
    ScriptName = escript:script_name(),
    io:format("~s~n~n"
              "Example usage:~n ~s~n",
              [usage_pattern(ScriptName), usage_example(ScriptName)]).

usage_pattern(ScriptName) ->
    ScriptName ++ "[-s LOGICAL_SWITCH_ID [INTERFACE_NAME]]"
        " -c [[tcp|tls]:CONTROLLER_ADDRES:CONTROLLER_PORT]"
        " -o OUTPUT_FILE".

usage_example(ScriptName) ->
    ScriptName ++ "-s 0 tap0 tap1 -c tcp:10.48.11.5:6633 tls:10.48.11.6:5533 "
        "-o ../rel/files/sys.config".

parse_args([], Config) ->
    [lists:keymember(RequiredArgument, 1, Config) orelse error(required_argument_missing)
     || RequiredArgument <- [switches, controllers, output_file]],
    Config;
parse_args(["-s", LogicalSwitch | Rest], Config) ->
    {Interfaces, NewRest} = parse_interfaces(Rest),
    Switches = case lists:keyfind(switches, 1, Config) of
                   false ->
                       [];
                   {switches, List} ->
                       List
               end,
    parse_args(NewRest,
               lists:keystore(
                 switches,
                 1,
                 Config,
                 {switches, [{LogicalSwitch, Interfaces} | Switches]}));
parse_args(["-o", Outputfile | Rest], Config) ->
    parse_args(Rest, [{output_file, Outputfile} | Config]);
parse_args(["-c" | Rest], Config) ->
    {Controllers, NewRest} = parse_controllers(Rest),
    parse_args(NewRest, [{controllers, Controllers} | Config]).

parse_interfaces(Args) ->
    split_to_next_option(Args).

split_to_next_option(Args) ->
    lists:splitwith(fun(Element) ->
                            Element =/= "-s"
                                andalso Element =/= "-o"
                                andalso Element =/= "-c"
                    end, Args).

parse_controllers(Args) ->
    {Controllers, Rest} = split_to_next_option(Args),
    {lists:foldl(fun(Controller, Acc) ->
                         [list_to_tuple(string:tokens(Controller, ":")) | Acc]
                 end, [], Controllers),
     Rest}.

generate_sys_config(Switches, Controllers) ->
    PortsNames = ports_names(Switches),
    PortsMap = lists:zip(PortsNames, lists:seq(1, length(PortsNames))),
    [
     {linc,
      [
       {of_config, enabled},
       {capable_switch_ports, generate_ports(PortsMap)},
       {capable_switch_queues, []},
       {logical_switches,
        generate_logical_switches(Switches, Controllers, PortsMap)}
      ]},
     {enetconf,
      [
       {capabilities, [{base, {1, 0}},
                       {base, {1, 1}},
                       {startup, {1, 0}},
                       {'writable-running', {1, 0}}]},
       {callback_module, linc_ofconfig},
       {sshd_ip, any},
       {sshd_port, 1830},
       {sshd_user_passwords,
        [
         {"linc", "linc"}
        ]}
      ]},
     {lager,
      [
       {handlers,
        [
         {lager_console_backend, debug},
         {lager_file_backend,
          [
           {"log/error.log", error, 10485760, "$D0", 5},
           {"log/console.log", info, 10485760, "$D0", 5}
          ]}
        ]}
      ]},
     {sasl,
      [
       {sasl_error_logger, {file, "log/sasl-error.log"}},
       {errlog_type, error},
       {error_logger_mf_dir, "log/sasl"},      % Log directory
       {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
       {error_logger_mf_maxfiles, 5}           % 5 files max
      ]},
     {sync,
      [
       {excluded_modules, [procket]}
      ]}
    ].

ports_names(Switches) ->
    lists:foldl(fun({_, Ports}, Acc) ->
                        Ports ++ Acc
                end, [], Switches).


generate_ports(PortsMap) ->
    [{port, PortNo, [{interface, PortName}]} || {PortName, PortNo} <- PortsMap].

generate_logical_switches(Switches, Controllers, PortsMap) ->
    [
     {switch, list_to_integer(SwitchId),
      [
       {backend, linc_us4},
       %% {controllers,[{"Switch" ++ SwitchId ++ "-Controller"
       %% , "localhost", 6633, tcp}]},
       {controllers, generate_logical_switch_controllers(SwitchId, Controllers)},
       {controllers_listener, disabled},
       {queues_status, disabled},
       {ports, generate_logical_switch_ports(PortsNames, PortsMap)}
      ]}
     || {SwitchId, PortsNames} <- Switches].

generate_logical_switch_controllers(SwitchId, Controllers) ->
    lists:foldl(fun({Protocol, HostOrIP, Port}, Acc) ->
                        [{"Switch" ++ SwitchId ++ "-Controller",
                          HostOrIP,
                          list_to_integer(Port),
                          list_to_atom(Protocol)} | Acc]
                end, [], Controllers).

generate_logical_switch_ports(PortsNames, PortsMap) ->
    [{port, element(2, lists:keyfind(PortName, 1, PortsMap)), {queues, []}}
     || PortName <- PortsNames].
